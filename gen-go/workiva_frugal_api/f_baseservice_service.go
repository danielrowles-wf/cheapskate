// Autogenerated by Frugal Compiler (1.0.9)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package workiva_frugal_api

import (
        "github.com/Workiva/frugal/lib/go"
	"bytes"
	"fmt"
	"log"
	"sync"
	"time"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/danielrowles-wf/cheapskate/gen-go/workiva_frugal_api_model"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type FBaseService interface {
	Ping(ctx *frugal.FContext) (err error)
	CheckServiceHealth(ctx *frugal.FContext) (r *workiva_frugal_api_model.ServiceHealthStatus, err error)
	GetInfo(ctx *frugal.FContext) (r *workiva_frugal_api_model.Info, err error)
}

type FBaseServiceClient struct {
	transport       frugal.FTransport
	protocolFactory *frugal.FProtocolFactory
	oprot           *frugal.FProtocol
	mu              sync.Mutex
}

func NewFBaseServiceClient(t frugal.FTransport, p *frugal.FProtocolFactory) *FBaseServiceClient {
	t.SetRegistry(frugal.NewFClientRegistry())
	return &FBaseServiceClient{
		transport:       t,
		protocolFactory: p,
		oprot:           p.GetProtocol(t),
	}
}

func (f *FBaseServiceClient) Ping(ctx *frugal.FContext) (err error) {
	errorC := make(chan error, 1)
	resultC := make(chan struct{}, 1)
	if err = f.transport.Register(ctx, f.recvPingHandler(ctx, resultC, errorC)); err != nil {
		return
	}
	defer f.transport.Unregister(ctx)
	f.mu.Lock()
	if err = f.oprot.WriteRequestHeader(ctx); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.WriteMessageBegin("ping", thrift.CALL, 0); err != nil {
		f.mu.Unlock()
		return
	}
	args := BaseServicePingArgs{}
	if err = args.Write(f.oprot); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.WriteMessageEnd(); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.Flush(); err != nil {
		f.mu.Unlock()
		return
	}
	f.mu.Unlock()

	select {
	case err = <-errorC:
	case <-resultC:
	case <-time.After(ctx.Timeout()):
		err = frugal.ErrTimeout
	case <-f.transport.Closed():
		err = frugal.ErrTransportClosed
	}
	return
}

func (f *FBaseServiceClient) recvPingHandler(ctx *frugal.FContext, resultC chan<- struct{}, errorC chan<- error) frugal.FAsyncCallback {
	return func(tr thrift.TTransport) error {
		iprot := f.protocolFactory.GetProtocol(tr)
		if err := iprot.ReadResponseHeader(ctx); err != nil {
			errorC <- err
			return err
		}
		method, mTypeId, _, err := iprot.ReadMessageBegin()
		if err != nil {
			errorC <- err
			return err
		}
		if method != "ping" {
			err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
			errorC <- err
			return err
		}
		if mTypeId == thrift.EXCEPTION {
			error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
			var error1 thrift.TApplicationException
			error1, err = error0.Read(iprot)
			if err != nil {
				errorC <- err
				return err
			}
			if err = iprot.ReadMessageEnd(); err != nil {
				errorC <- err
				return err
			}
			if error1.TypeId() == frugal.RESPONSE_TOO_LARGE {
				err = thrift.NewTTransportException(frugal.RESPONSE_TOO_LARGE, "response too large for transport")
				errorC <- err
				return nil
			}
			err = error1
			errorC <- err
			return err
		}
		if mTypeId != thrift.REPLY {
			err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
			errorC <- err
			return err
		}
		result := BaseServicePingResult{}
		if err = result.Read(iprot); err != nil {
			errorC <- err
			return err
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			errorC <- err
			return err
		}
		resultC <- struct{}{}
		return nil
	}
}

func (f *FBaseServiceClient) CheckServiceHealth(ctx *frugal.FContext) (r *workiva_frugal_api_model.ServiceHealthStatus, err error) {
	errorC := make(chan error, 1)
	resultC := make(chan *workiva_frugal_api_model.ServiceHealthStatus, 1)
	if err = f.transport.Register(ctx, f.recvCheckServiceHealthHandler(ctx, resultC, errorC)); err != nil {
		return
	}
	defer f.transport.Unregister(ctx)
	f.mu.Lock()
	if err = f.oprot.WriteRequestHeader(ctx); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.WriteMessageBegin("checkServiceHealth", thrift.CALL, 0); err != nil {
		f.mu.Unlock()
		return
	}
	args := BaseServiceCheckServiceHealthArgs{}
	if err = args.Write(f.oprot); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.WriteMessageEnd(); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.Flush(); err != nil {
		f.mu.Unlock()
		return
	}
	f.mu.Unlock()

	select {
	case err = <-errorC:
	case r = <-resultC:
	case <-time.After(ctx.Timeout()):
		err = frugal.ErrTimeout
	case <-f.transport.Closed():
		err = frugal.ErrTransportClosed
	}
	return
}

func (f *FBaseServiceClient) recvCheckServiceHealthHandler(ctx *frugal.FContext, resultC chan<- *workiva_frugal_api_model.ServiceHealthStatus, errorC chan<- error) frugal.FAsyncCallback {
	return func(tr thrift.TTransport) error {
		iprot := f.protocolFactory.GetProtocol(tr)
		if err := iprot.ReadResponseHeader(ctx); err != nil {
			errorC <- err
			return err
		}
		method, mTypeId, _, err := iprot.ReadMessageBegin()
		if err != nil {
			errorC <- err
			return err
		}
		if method != "checkServiceHealth" {
			err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "checkServiceHealth failed: wrong method name")
			errorC <- err
			return err
		}
		if mTypeId == thrift.EXCEPTION {
			error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
			var error1 thrift.TApplicationException
			error1, err = error0.Read(iprot)
			if err != nil {
				errorC <- err
				return err
			}
			if err = iprot.ReadMessageEnd(); err != nil {
				errorC <- err
				return err
			}
			if error1.TypeId() == frugal.RESPONSE_TOO_LARGE {
				err = thrift.NewTTransportException(frugal.RESPONSE_TOO_LARGE, "response too large for transport")
				errorC <- err
				return nil
			}
			err = error1
			errorC <- err
			return err
		}
		if mTypeId != thrift.REPLY {
			err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkServiceHealth failed: invalid message type")
			errorC <- err
			return err
		}
		result := BaseServiceCheckServiceHealthResult{}
		if err = result.Read(iprot); err != nil {
			errorC <- err
			return err
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			errorC <- err
			return err
		}
		resultC <- result.GetSuccess()
		return nil
	}
}

func (f *FBaseServiceClient) GetInfo(ctx *frugal.FContext) (r *workiva_frugal_api_model.Info, err error) {
	errorC := make(chan error, 1)
	resultC := make(chan *workiva_frugal_api_model.Info, 1)
	if err = f.transport.Register(ctx, f.recvGetInfoHandler(ctx, resultC, errorC)); err != nil {
		return
	}
	defer f.transport.Unregister(ctx)
	f.mu.Lock()
	if err = f.oprot.WriteRequestHeader(ctx); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.WriteMessageBegin("getInfo", thrift.CALL, 0); err != nil {
		f.mu.Unlock()
		return
	}
	args := BaseServiceGetInfoArgs{}
	if err = args.Write(f.oprot); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.WriteMessageEnd(); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.Flush(); err != nil {
		f.mu.Unlock()
		return
	}
	f.mu.Unlock()

	select {
	case err = <-errorC:
	case r = <-resultC:
	case <-time.After(ctx.Timeout()):
		err = frugal.ErrTimeout
	case <-f.transport.Closed():
		err = frugal.ErrTransportClosed
	}
	return
}

func (f *FBaseServiceClient) recvGetInfoHandler(ctx *frugal.FContext, resultC chan<- *workiva_frugal_api_model.Info, errorC chan<- error) frugal.FAsyncCallback {
	return func(tr thrift.TTransport) error {
		iprot := f.protocolFactory.GetProtocol(tr)
		if err := iprot.ReadResponseHeader(ctx); err != nil {
			errorC <- err
			return err
		}
		method, mTypeId, _, err := iprot.ReadMessageBegin()
		if err != nil {
			errorC <- err
			return err
		}
		if method != "getInfo" {
			err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getInfo failed: wrong method name")
			errorC <- err
			return err
		}
		if mTypeId == thrift.EXCEPTION {
			error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
			var error1 thrift.TApplicationException
			error1, err = error0.Read(iprot)
			if err != nil {
				errorC <- err
				return err
			}
			if err = iprot.ReadMessageEnd(); err != nil {
				errorC <- err
				return err
			}
			if error1.TypeId() == frugal.RESPONSE_TOO_LARGE {
				err = thrift.NewTTransportException(frugal.RESPONSE_TOO_LARGE, "response too large for transport")
				errorC <- err
				return nil
			}
			err = error1
			errorC <- err
			return err
		}
		if mTypeId != thrift.REPLY {
			err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getInfo failed: invalid message type")
			errorC <- err
			return err
		}
		result := BaseServiceGetInfoResult{}
		if err = result.Read(iprot); err != nil {
			errorC <- err
			return err
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			errorC <- err
			return err
		}
		resultC <- result.GetSuccess()
		return nil
	}
}

type FBaseServiceProcessor struct {
	processorMap map[string]frugal.FProcessorFunction
	writeMu      *sync.Mutex
	handler      FBaseService
}

func NewFBaseServiceProcessor(handler FBaseService) *FBaseServiceProcessor {
	writeMu := &sync.Mutex{}
	p := &FBaseServiceProcessor{
		processorMap: make(map[string]frugal.FProcessorFunction),
		writeMu:      writeMu,
		handler:      handler,
	}
	p.AddToProcessorMap("ping", &baseserviceFPing{handler: handler, writeMu: p.GetWriteMutex()})
	p.AddToProcessorMap("checkServiceHealth", &baseserviceFCheckServiceHealth{handler: handler, writeMu: p.GetWriteMutex()})
	p.AddToProcessorMap("getInfo", &baseserviceFGetInfo{handler: handler, writeMu: p.GetWriteMutex()})
	return p
}

func (p *FBaseServiceProcessor) AddToProcessorMap(key string, proc frugal.FProcessorFunction) {
	p.processorMap[key] = proc
}

func (p *FBaseServiceProcessor) GetProcessorFunction(key string) (processor frugal.FProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return
}

func (p *FBaseServiceProcessor) GetWriteMutex() *sync.Mutex {
	return p.writeMu
}

func (p *FBaseServiceProcessor) Process(iprot, oprot *frugal.FProtocol) error {
	ctx, err := iprot.ReadRequestHeader()
	if err != nil {
		return err
	}
	name, _, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		err := processor.Process(ctx, iprot, oprot)
		if err != nil {
			log.Printf("frugal: Error processing request with correlationID %s: %s\n", ctx.CorrelationID(), err.Error())
		}
		return err
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	p.writeMu.Lock()
	oprot.WriteResponseHeader(ctx)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, 0)
	x3.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	p.writeMu.Unlock()
	return x3
}

type baseserviceFPing struct {
	handler FBaseService
	writeMu *sync.Mutex
}

func (p *baseserviceFPing) Process(ctx *frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := BaseServicePingArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.writeMu.Lock()
		baseserviceWriteApplicationError(ctx, oprot, thrift.PROTOCOL_ERROR, "ping", err.Error())
		p.writeMu.Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := BaseServicePingResult{}
	var err2 error
	if err2 = p.handler.Ping(ctx); err2 != nil {
		p.writeMu.Lock()
		baseserviceWriteApplicationError(ctx, oprot, thrift.INTERNAL_ERROR, "ping", "Internal error processing ping: "+err2.Error())
		p.writeMu.Unlock()
		return err2
	}
	p.writeMu.Lock()
	defer p.writeMu.Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "ping", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, 0); err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "ping", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "ping", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "ping", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "ping", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type baseserviceFCheckServiceHealth struct {
	handler FBaseService
	writeMu *sync.Mutex
}

func (p *baseserviceFCheckServiceHealth) Process(ctx *frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := BaseServiceCheckServiceHealthArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.writeMu.Lock()
		baseserviceWriteApplicationError(ctx, oprot, thrift.PROTOCOL_ERROR, "checkServiceHealth", err.Error())
		p.writeMu.Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := BaseServiceCheckServiceHealthResult{}
	var err2 error
	var retval *workiva_frugal_api_model.ServiceHealthStatus
	if retval, err2 = p.handler.CheckServiceHealth(ctx); err2 != nil {
		p.writeMu.Lock()
		baseserviceWriteApplicationError(ctx, oprot, thrift.INTERNAL_ERROR, "checkServiceHealth", "Internal error processing checkServiceHealth: "+err2.Error())
		p.writeMu.Unlock()
		return err2
	} else {
		result.Success = retval
	}
	p.writeMu.Lock()
	defer p.writeMu.Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "checkServiceHealth", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("checkServiceHealth", thrift.REPLY, 0); err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "checkServiceHealth", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "checkServiceHealth", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "checkServiceHealth", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "checkServiceHealth", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type baseserviceFGetInfo struct {
	handler FBaseService
	writeMu *sync.Mutex
}

func (p *baseserviceFGetInfo) Process(ctx *frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := BaseServiceGetInfoArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.writeMu.Lock()
		baseserviceWriteApplicationError(ctx, oprot, thrift.PROTOCOL_ERROR, "getInfo", err.Error())
		p.writeMu.Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := BaseServiceGetInfoResult{}
	var err2 error
	var retval *workiva_frugal_api_model.Info
	if retval, err2 = p.handler.GetInfo(ctx); err2 != nil {
		p.writeMu.Lock()
		baseserviceWriteApplicationError(ctx, oprot, thrift.INTERNAL_ERROR, "getInfo", "Internal error processing getInfo: "+err2.Error())
		p.writeMu.Unlock()
		return err2
	} else {
		result.Success = retval
	}
	p.writeMu.Lock()
	defer p.writeMu.Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getInfo", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("getInfo", thrift.REPLY, 0); err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getInfo", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getInfo", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getInfo", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if err2 == frugal.ErrTooLarge {
			baseserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getInfo", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

func baseserviceWriteApplicationError(ctx *frugal.FContext, oprot *frugal.FProtocol, type_ int32, method, message string) {
	x := thrift.NewTApplicationException(type_, message)
	oprot.WriteResponseHeader(ctx)
	oprot.WriteMessageBegin(method, thrift.EXCEPTION, 0)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
}
