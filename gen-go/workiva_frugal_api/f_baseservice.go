// Autogenerated by Frugal Compiler (1.15.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package workiva_frugal_api

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/danielrowles-wf/cheapskate/gen-go/workiva_frugal_api_model"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = workiva_frugal_api_model.GoUnusedProtection__

type BaseServicePingArgs struct {
}

func NewBaseServicePingArgs() *BaseServicePingArgs {
	return &BaseServicePingArgs{}
}

func (p *BaseServicePingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServicePingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServicePingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseServicePingArgs(%+v)", *p)
}

type BaseServicePingResult struct {
	BErr *workiva_frugal_api_model.BaseError `thrift:"bErr,1" db:"bErr" json:"bErr,omitempty"`
}

func NewBaseServicePingResult() *BaseServicePingResult {
	return &BaseServicePingResult{}
}

var BaseServicePingResult_BErr_DEFAULT *workiva_frugal_api_model.BaseError

func (p *BaseServicePingResult) IsSetBErr() bool {
	return p.BErr != nil
}

func (p *BaseServicePingResult) GetBErr() *workiva_frugal_api_model.BaseError {
	if !p.IsSetBErr() {
		return BaseServicePingResult_BErr_DEFAULT
	}
	return p.BErr
}

func (p *BaseServicePingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServicePingResult) ReadField1(iprot thrift.TProtocol) error {
	p.BErr = workiva_frugal_api_model.NewBaseError()
	if err := p.BErr.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BErr), err)
	}
	return nil
}

func (p *BaseServicePingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServicePingResult) writeField1(oprot thrift.TProtocol) error {
	if p.IsSetBErr() {
		if err := oprot.WriteFieldBegin("bErr", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bErr: ", p), err)
		}
		if err := p.BErr.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BErr), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bErr: ", p), err)
		}
	}
	return nil
}

func (p *BaseServicePingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseServicePingResult(%+v)", *p)
}

type BaseServiceCheckServiceHealthArgs struct {
}

func NewBaseServiceCheckServiceHealthArgs() *BaseServiceCheckServiceHealthArgs {
	return &BaseServiceCheckServiceHealthArgs{}
}

func (p *BaseServiceCheckServiceHealthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceCheckServiceHealthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkServiceHealth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceCheckServiceHealthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseServiceCheckServiceHealthArgs(%+v)", *p)
}

type BaseServiceCheckServiceHealthResult struct {
	Success *workiva_frugal_api_model.ServiceHealthStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
	BErr    *workiva_frugal_api_model.BaseError           `thrift:"bErr,1" db:"bErr" json:"bErr,omitempty"`
}

func NewBaseServiceCheckServiceHealthResult() *BaseServiceCheckServiceHealthResult {
	return &BaseServiceCheckServiceHealthResult{}
}

var BaseServiceCheckServiceHealthResult_Success_DEFAULT *workiva_frugal_api_model.ServiceHealthStatus

func (p *BaseServiceCheckServiceHealthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BaseServiceCheckServiceHealthResult) GetSuccess() *workiva_frugal_api_model.ServiceHealthStatus {
	if !p.IsSetSuccess() {
		return BaseServiceCheckServiceHealthResult_Success_DEFAULT
	}
	return p.Success
}

var BaseServiceCheckServiceHealthResult_BErr_DEFAULT *workiva_frugal_api_model.BaseError

func (p *BaseServiceCheckServiceHealthResult) IsSetBErr() bool {
	return p.BErr != nil
}

func (p *BaseServiceCheckServiceHealthResult) GetBErr() *workiva_frugal_api_model.BaseError {
	if !p.IsSetBErr() {
		return BaseServiceCheckServiceHealthResult_BErr_DEFAULT
	}
	return p.BErr
}

func (p *BaseServiceCheckServiceHealthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceCheckServiceHealthResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = workiva_frugal_api_model.NewServiceHealthStatus()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BaseServiceCheckServiceHealthResult) ReadField1(iprot thrift.TProtocol) error {
	p.BErr = workiva_frugal_api_model.NewBaseError()
	if err := p.BErr.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BErr), err)
	}
	return nil
}

func (p *BaseServiceCheckServiceHealthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkServiceHealth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceCheckServiceHealthResult) writeField0(oprot thrift.TProtocol) error {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return nil
}

func (p *BaseServiceCheckServiceHealthResult) writeField1(oprot thrift.TProtocol) error {
	if p.IsSetBErr() {
		if err := oprot.WriteFieldBegin("bErr", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bErr: ", p), err)
		}
		if err := p.BErr.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BErr), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bErr: ", p), err)
		}
	}
	return nil
}

func (p *BaseServiceCheckServiceHealthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseServiceCheckServiceHealthResult(%+v)", *p)
}

type BaseServiceGetInfoArgs struct {
}

func NewBaseServiceGetInfoArgs() *BaseServiceGetInfoArgs {
	return &BaseServiceGetInfoArgs{}
}

func (p *BaseServiceGetInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceGetInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceGetInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseServiceGetInfoArgs(%+v)", *p)
}

type BaseServiceGetInfoResult struct {
	Success *workiva_frugal_api_model.Info      `thrift:"success,0" db:"success" json:"success,omitempty"`
	BErr    *workiva_frugal_api_model.BaseError `thrift:"bErr,1" db:"bErr" json:"bErr,omitempty"`
}

func NewBaseServiceGetInfoResult() *BaseServiceGetInfoResult {
	return &BaseServiceGetInfoResult{}
}

var BaseServiceGetInfoResult_Success_DEFAULT *workiva_frugal_api_model.Info

func (p *BaseServiceGetInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BaseServiceGetInfoResult) GetSuccess() *workiva_frugal_api_model.Info {
	if !p.IsSetSuccess() {
		return BaseServiceGetInfoResult_Success_DEFAULT
	}
	return p.Success
}

var BaseServiceGetInfoResult_BErr_DEFAULT *workiva_frugal_api_model.BaseError

func (p *BaseServiceGetInfoResult) IsSetBErr() bool {
	return p.BErr != nil
}

func (p *BaseServiceGetInfoResult) GetBErr() *workiva_frugal_api_model.BaseError {
	if !p.IsSetBErr() {
		return BaseServiceGetInfoResult_BErr_DEFAULT
	}
	return p.BErr
}

func (p *BaseServiceGetInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceGetInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = workiva_frugal_api_model.NewInfo()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BaseServiceGetInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.BErr = workiva_frugal_api_model.NewBaseError()
	if err := p.BErr.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BErr), err)
	}
	return nil
}

func (p *BaseServiceGetInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceGetInfoResult) writeField0(oprot thrift.TProtocol) error {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return nil
}

func (p *BaseServiceGetInfoResult) writeField1(oprot thrift.TProtocol) error {
	if p.IsSetBErr() {
		if err := oprot.WriteFieldBegin("bErr", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bErr: ", p), err)
		}
		if err := p.BErr.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BErr), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bErr: ", p), err)
		}
	}
	return nil
}

func (p *BaseServiceGetInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseServiceGetInfoResult(%+v)", *p)
}

type BaseServiceGetHealthArgs struct {
}

func NewBaseServiceGetHealthArgs() *BaseServiceGetHealthArgs {
	return &BaseServiceGetHealthArgs{}
}

func (p *BaseServiceGetHealthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceGetHealthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getHealth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceGetHealthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseServiceGetHealthArgs(%+v)", *p)
}

type BaseServiceGetHealthResult struct {
	Success *workiva_frugal_api_model.Health    `thrift:"success,0" db:"success" json:"success,omitempty"`
	BErr    *workiva_frugal_api_model.BaseError `thrift:"bErr,1" db:"bErr" json:"bErr,omitempty"`
}

func NewBaseServiceGetHealthResult() *BaseServiceGetHealthResult {
	return &BaseServiceGetHealthResult{}
}

var BaseServiceGetHealthResult_Success_DEFAULT *workiva_frugal_api_model.Health

func (p *BaseServiceGetHealthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BaseServiceGetHealthResult) GetSuccess() *workiva_frugal_api_model.Health {
	if !p.IsSetSuccess() {
		return BaseServiceGetHealthResult_Success_DEFAULT
	}
	return p.Success
}

var BaseServiceGetHealthResult_BErr_DEFAULT *workiva_frugal_api_model.BaseError

func (p *BaseServiceGetHealthResult) IsSetBErr() bool {
	return p.BErr != nil
}

func (p *BaseServiceGetHealthResult) GetBErr() *workiva_frugal_api_model.BaseError {
	if !p.IsSetBErr() {
		return BaseServiceGetHealthResult_BErr_DEFAULT
	}
	return p.BErr
}

func (p *BaseServiceGetHealthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceGetHealthResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = workiva_frugal_api_model.NewHealth()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BaseServiceGetHealthResult) ReadField1(iprot thrift.TProtocol) error {
	p.BErr = workiva_frugal_api_model.NewBaseError()
	if err := p.BErr.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BErr), err)
	}
	return nil
}

func (p *BaseServiceGetHealthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getHealth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceGetHealthResult) writeField0(oprot thrift.TProtocol) error {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return nil
}

func (p *BaseServiceGetHealthResult) writeField1(oprot thrift.TProtocol) error {
	if p.IsSetBErr() {
		if err := oprot.WriteFieldBegin("bErr", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bErr: ", p), err)
		}
		if err := p.BErr.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BErr), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bErr: ", p), err)
		}
	}
	return nil
}

func (p *BaseServiceGetHealthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseServiceGetHealthResult(%+v)", *p)
}
